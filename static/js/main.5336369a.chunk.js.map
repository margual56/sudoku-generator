{"version":3,"sources":["components/Toggle.js","components/NumberInput.js","components/Sudoku.js","App.js","index.js"],"names":["Toggle","props","toggleActive","setState","active","state","toggleCallback","onToggle","className","this","type","onChange","checked","Component","NumberInput","checkInput","e","correction","isCorrect","hasCorrect","classList","indexOf","hasWrong","push","splice","forceUpdate","console","log","split","join","onBlur","maxLength","cols","rows","Sudoku","mat","matIncomplete","N","K","SRN","reload","tmp","Array","i","j","Math","sqrt","floor","random","solve","clone","unSolveK","shuffle","array","randomIndex","currentIndex","length","nextEmptySpot","checkRow","row","value","checkColumn","column","checkSquare","boxRow","boxCol","r","c","checkValue","randNum","emptySpot","col","forEach","num","matrix","m","randX","randY","toggleComplete","showComplete","val","Number","target","showSolution","realTimeCorrection","map","item","entry","element","realtime","btnText","onClick","isActive","items","isArray","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAiCeA,E,kDA3Bd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAQPC,aAAe,WACd,EAAKC,SAAS,CAACC,QAAS,EAAKC,MAAMD,SAAS,WAAO,EAAKC,MAAMC,eAAe,EAAKD,MAAMD,YAPxF,EAAKC,MAAQ,CACZD,OAAQH,EAAMG,SAAU,EACxBE,eAAgBL,EAAMM,UAAY,MALlB,E,0CAalB,WACC,OACC,sBAAKC,UAAU,SAAf,UACC,uDAA0BC,KAAKJ,MAAMD,OAAO,UAAU,cAEtD,wBAAOI,UAAU,SAAjB,UACC,uBAAOE,KAAK,WAAWC,SAAUF,KAAKP,aAAcU,QAASH,KAAKJ,MAAMD,SACxE,sBAAMI,UAAU,2B,GArBAK,aCiDNC,E,kDAnDd,WAAYb,GAAO,IAAD,8BACjB,cAAMA,IAUPc,WAAa,SAACC,GACb,GAA6B,OAA1B,EAAKX,MAAMY,WAAd,CAGA,IAAIC,EAAY,EAAKb,MAAMY,WAAWD,GAElCG,EAAa,EAAKd,MAAMe,UAAUC,QAAQ,WAC1CC,EAAW,EAAKjB,MAAMe,UAAUC,QAAQ,SAEzCH,IACiB,IAAhBC,GACF,EAAKd,MAAMe,UAAUG,KAAK,YAEV,IAAdD,GACF,EAAKjB,MAAMe,UAAUI,OAAOF,EAAU,MAEtB,IAAdA,GACF,EAAKjB,MAAMe,UAAUG,KAAK,UAER,IAAhBJ,GACF,EAAKd,MAAMe,UAAUI,OAAOL,EAAY,IAG1C,EAAKM,gBA/BLC,QAAQC,IAAI1B,EAAMO,WAElB,EAAKH,MAAQ,CACZY,WAAYhB,EAAMgB,YAAc,KAChCG,WAAYnB,EAAMO,WAAa,IAAIoB,MAAM,MAPzB,E,0CAqClB,WAAU,IAAD,OACR,OACC,0BACCpB,UAAWC,KAAKJ,MAAMe,UAAUS,KAAK,KACrCC,OAAQ,SAACd,GAAD,OAAO,EAAKD,WAAWC,IAC/Be,UAAW,EACXC,KAAM,EACNC,KAAM,Q,GA7CgBpB,aCKpBqB,G,wDAQF,WAAYjC,GAAQ,IAAD,uBACrB,cAAMA,IARPkC,IAAM,KAOgB,EANtBC,cAAgB,KAMM,EALtBC,EAAI,EAKkB,EAJtBC,EAAI,GAIkB,EAHtBC,KAAO,EAGe,EA+BtBC,OAAS,WAER,IADA,IAAIC,EAAMC,MAAM,EAAKL,GACbM,EAAI,EAAGA,EAAE,EAAKN,EAAGM,IAAI,CAC5BF,EAAIE,GAAKD,MAAM,EAAKL,GAEpB,IAAI,IAAIO,EAAI,EAAGA,EAAE,EAAKP,EAAGO,IACxBH,EAAIE,GAAGC,GAAK,EAKR,EAAKL,IAAMM,KAAKC,KAAK,EAAKT,GAChC,EAAKF,IAAMM,EAGX,IAAI,IAAIE,EAAI,EAAGA,EAAE,EAAGA,IACnB,EAAKR,IAAIU,KAAKE,MAAoB,EAAdF,KAAKG,WAAaH,KAAKE,MAAoB,EAAdF,KAAKG,WAAe,EAAEH,KAAKE,MAAoB,EAAdF,KAAKG,UAExF,EAAKb,IAAM,EAAKc,MAAM,EAAKd,KAE3B,EAAKC,cAAgBc,EAAM,EAAKf,KAChC,EAAKC,cAAgB,EAAKe,SAAS,EAAKf,cAAe,EAAKE,IApDvC,EAuDtBc,QAAU,SAACC,GAIV,IAHA,IAAkCC,EAA9BC,EAAeF,EAAMG,OAGD,IAAjBD,GAAoB,CAE1BD,EAAcT,KAAKE,MAAMF,KAAKG,SAAWO,GACzCA,IAH0B,MAMkB,CAC5CF,EAAMC,GAAcD,EAAME,IADzBF,EAAME,GANmB,KAMJF,EAAMC,GANF,KAU3B,OAAOD,GArEc,EAwEtBI,cAAgB,SAACtB,GAChB,IAAK,IAAIQ,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAkB,IAAdT,EAAIQ,GAAGC,GACV,MAAO,CAACD,EAAGC,GAId,MAAO,EAAE,GAAI,IAhFQ,EAmFnBc,SAAW,SAACvB,EAAKwB,EAAKC,GACxB,IAAI,IAAIjB,EAAI,EAAGA,EAAIR,EAAIwB,GAAKH,OAAQb,IACnC,GAAGR,EAAIwB,GAAKhB,KAAOiB,EAClB,OAAO,EAIT,OAAO,GA1Fc,EA6FtBC,YAAc,SAAC1B,EAAK2B,EAAQF,GAC3B,IAAI,IAAIjB,EAAI,EAAGA,EAAIR,EAAIqB,OAAQb,IAC9B,GAAGR,EAAIQ,GAAGmB,KAAYF,EACrB,OAAO,EAIT,OAAO,GApGc,EAuGtBG,YAAc,SAAC5B,EAAKwB,EAAKG,EAAQF,GAIhC,IAHA,IAAII,EAA+B,EAAtBnB,KAAKE,MAAMY,EAAM,GAC1BM,EAAkC,EAAzBpB,KAAKE,MAAMe,EAAS,GAExBI,EAAI,EAAGA,EAAI,EAAGA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACtB,GAAIhC,EAAI6B,EAASE,GAAGD,EAASE,KAAOP,EACnC,OAAO,EAIV,OAAO,GAlHc,EAqHtBQ,WAAa,SAACjC,EAAKwB,EAAKG,EAAQF,GAC/B,SAAG,EAAKF,SAASvB,EAAKwB,EAAKC,IAC1B,EAAKC,YAAY1B,EAAK2B,EAAQF,IAC9B,EAAKG,YAAY5B,EAAKwB,EAAKG,EAAQF,KAxHf,EA+HtBS,QAAU,WACT,OAAOxB,KAAKE,MAAMF,KAAKG,SAAS,EAAKX,GAAG,GAhInB,EAmItBY,MAAQ,SAACd,GACR,IAAImC,EAAY,EAAKb,cAActB,GAC/BwB,EAAMW,EAAU,GAChBC,EAAMD,EAAU,GAGpB,OAAa,IAATX,IAIO,EAAKP,QAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC5CoB,SAAQ,SAAAC,GACT,EAAKL,WAAWjC,EAAKwB,EAAKY,EAAKE,KACjCtC,EAAIwB,GAAKY,GAAOE,EAChB,EAAKxB,MAAMd,QAIuB,IAAhC,EAAKsB,cAActB,GAAK,KAC3BA,EAAIwB,GAAKY,GAAO,IAZTpC,GA1Ia,EA2JtBgB,SAAW,SAACuB,EAAQpC,GAEnB,IADA,IAAIqC,EAAC,YAAOD,GACJ/B,EAAI,EAAGA,EAAEL,EAAGK,IAAI,CACvB,IAAIiC,OAAK,EAAEC,OAAK,EAEhB,GACCD,EAAQ/B,KAAKE,MAAMF,KAAKG,SAAS,EAAKX,GACtCwC,EAAQhC,KAAKE,MAAMF,KAAKG,SAAS,EAAKX,UACX,IAArBsC,EAAEC,GAAOC,IAEhBF,EAAEC,GAAOC,IAAU,EAGpB,OAAOF,GAxKc,EA2KtBG,eAAiB,WAChB,EAAKC,cAAgB,EAAKA,cA5KL,EA+KtBhE,WAAa,SAAC4B,EAAGC,EAAG5B,GACnB,IAAIgE,EAAMC,OAAOjE,EAAEkE,OAAOtB,OAI1B,OAHgB,EAAKzB,IAAIQ,GAAGC,KAAOoC,GA9KnC,EAAK3E,MAAQ,CACZ8E,aAAclF,EAAMkF,eAAgB,EACpCC,oBAAoB,GAIrB,IADA,IAAI3C,EAAMC,MAAM,EAAKL,GACbM,EAAI,EAAGA,EAAE,EAAKN,EAAGM,IAAI,CAC5BF,EAAIE,GAAKD,MAAM,EAAKL,GAEpB,IAAI,IAAIO,EAAI,EAAGA,EAAE,EAAKP,EAAGO,IACxBH,EAAIE,GAAGC,GAAK,EAKR,EAAKL,IAAMM,KAAKC,KAAK,EAAKT,GAChC,EAAKF,IAAMM,EAGX,IAAI,IAAIE,EAAI,EAAGA,EAAE,EAAGA,IACnB,EAAKR,IAAIU,KAAKE,MAAoB,EAAdF,KAAKG,WAAaH,KAAKE,MAAoB,EAAdF,KAAKG,WAAe,EAAEH,KAAKE,MAAoB,EAAdF,KAAKG,UAvBnE,OAyBrB,EAAKb,IAAM,EAAKc,MAAM,EAAKd,KAC3B,EAAKC,cAAgBc,EAAM,EAAKf,KAEhC,EAAKC,cAAgB,EAAKe,SAAS,EAAKf,cAAe,EAAKE,GA5BvC,E,0CAuLtB,WAAS,IACJL,EADG,OAINA,EADExB,KAAKJ,MAAM8E,aACN1E,KAAK0B,IAAIkD,KAAI,SAACC,EAAM3C,GAC1B,IAAI4C,EAAQD,EAAKD,KAAI,SAACG,EAAS5C,GAC9B,OACC,6BAAa4C,GAAJ5C,MAGX,OACC,6BAAa2C,GAAJ5C,MAIJlC,KAAK2B,cAAciD,KAAI,SAACC,EAAM3C,GACpC,IAAI4C,EAAQD,EAAKD,KAAI,SAACG,EAAS5C,GAC9B,OAAgB,IAAb4C,EAED,6BAAaA,GAAJ5C,GAIT,oBAAIpC,UAAW,SAAW,EAAKH,MAAM+E,mBAAmB,YAAY,IAApE,SACC,cAAC,EAAD,CACCK,SAAU,EAAKpF,MAAM+E,mBACrBnE,WAAY,SAAAD,GAAM,OAAO,EAAKD,WAAW4B,EAAGC,EAAG5B,OAH6B4B,MASjF,OACC,6BAAa2C,GAAJ5C,MAKZ,IAAI+C,EAAUjF,KAAKsE,aAAa,gBAAgB,gBAEhD,OACC,sBAAKvE,UAAU,mBAAf,UACC,uBAAOA,UAAU,SAAjB,SACC,gCACCyB,MAIF,sBAAKzB,UAAU,UAAf,UACC,wBAAQmF,QAAS,WACf,EAAKnD,SACL,EAAKf,cACLC,QAAQC,IAAI,cAHd,qBAMA,qBAAKnB,UAAU,WAEf,wBAAQmF,QAAS,WACf,EAAKb,iBACL,EAAKrD,cACLC,QAAQC,IAAI,EAAKoD,aAAa,mBAAmB,oBAHnD,SAIKW,IAEL,cAAC,EAAD,CAAQnF,SAAU,SAACqF,GAAc,EAAKzF,SAAS,CAACiF,mBAAoBQ,iB,GA9PpD/E,cAsQfqC,EAAQ,SAARA,EAAS2C,GAAD,OAAWA,EAAMR,KAAI,SAAAC,GAAI,OAAI5C,MAAMoD,QAAQR,GAAQpC,EAAMoC,GAAQA,MAEhEpD,I,MCnQA6D,MARf,WACC,OACC,qBAAKvF,UAAU,MAAf,SACC,cAAC,EAAD,OCHHwF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5336369a.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nimport '../styles/toggle.scss';\nimport '../styles/toggle-text.scss';\n\nclass Toggle extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tactive: props.active || false,\n\t\t\ttoggleCallback: props.onToggle || null\n\t\t};\n\t}\n\n\ttoggleActive = () => {\n\t\tthis.setState({active: !this.state.active}, () => {this.state.toggleCallback(this.state.active);});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"toggle\">\n\t\t\t\t<p>Real-time correction: {this.state.active?\"Enabled\":\"Disabled\"}</p>\n\n\t\t\t\t<label className=\"switch\">\n\t\t\t\t\t<input type=\"checkbox\" onChange={this.toggleActive} checked={this.state.active}></input>\n\t\t\t\t\t<span className=\"slider round\"></span>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Toggle;","import { Component } from \"react\";\n\nclass NumberInput extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tconsole.log(props.className);\n\n\t\tthis.state = {\n\t\t\tcorrection: props.correction || null,\n\t\t\tclassList: (props.className || \"\").split(' ')\n\t\t}\n\t}\n\n\tcheckInput = (e) => {\n\t\tif(this.state.correction === null)\n\t\t\treturn;\n\n\t\tlet isCorrect = this.state.correction(e);\n\t\t\n\t\tlet hasCorrect = this.state.classList.indexOf(\"correct\");\n\t\tlet hasWrong = this.state.classList.indexOf(\"wrong\");\n \n\t\tif(isCorrect){\n\t\t\tif(hasCorrect === -1)\n\t\t\t\tthis.state.classList.push(\"correct\");\n\n\t\t\tif(hasWrong !== -1)\n\t\t\t\tthis.state.classList.splice(hasWrong, 1);\n\t\t}else{\n\t\t\tif(hasWrong === -1)\n\t\t\t\tthis.state.classList.push(\"wrong\");\n\n\t\t\tif(hasCorrect !== -1)\n\t\t\t\tthis.state.classList.splice(hasCorrect, 1);\n\t\t}\n\n\t\tthis.forceUpdate();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<textarea \n\t\t\t\tclassName={this.state.classList.join(\" \")}\n\t\t\t\tonBlur={(e) => this.checkInput(e)} \n\t\t\t\tmaxLength={1} \n\t\t\t\tcols={1} \n\t\t\t\trows={1}\n\t\t\t>\n\t\t\t</textarea>\n\t\t);\n\t}\n}\n\nexport default NumberInput;","import { Component } from 'react';\n\nimport Toggle from './Toggle';\nimport NumberInput from './NumberInput';\n\nimport '../styles/sudoku.scss';\n\nclass Sudoku extends Component {\n\tmat = null;\n\tmatIncomplete = null;\n\tN = 9; // number of columns/rows.\n\tK = 60; // No. Of missing digits\n\tSRN = -1; // square root of N\n\n    // Constructor\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowSolution: props.showSolution || false,\n\t\t\trealTimeCorrection: false\n\t\t}\n\n\t\tlet tmp = Array(this.N);\n\t\tfor(let i = 0; i<this.N; i++){\n\t\t\ttmp[i] = Array(this.N);\n\n\t\t\tfor(let j = 0; j<this.N; j++){\n\t\t\t\ttmp[i][j] = 0;\n\t\t\t}\n\t\t}\n\n        // Compute square root of N\n        this.SRN = Math.sqrt(this.N);\n\t\tthis.mat = tmp;\n\n\t\t//window.requestIdleCallback(() => this.map = this.solve(this.mat));\n\t\tfor(let i = 0; i<3; i++)\n\t\t\tthis.mat[Math.floor(Math.random()*9)][Math.floor(Math.random()*9)] = 1+Math.floor(Math.random()*9);\n\t\t\n\t\tthis.mat = this.solve(this.mat);\n\t\tthis.matIncomplete = clone(this.mat);\n\n\t\tthis.matIncomplete = this.unSolveK(this.matIncomplete, this.K);\n    }\n\n\treload = () => {\n\t\tlet tmp = Array(this.N);\n\t\tfor(let i = 0; i<this.N; i++){\n\t\t\ttmp[i] = Array(this.N);\n\n\t\t\tfor(let j = 0; j<this.N; j++){\n\t\t\t\ttmp[i][j] = 0;\n\t\t\t}\n\t\t}\n\n        // Compute square root of N\n        this.SRN = Math.sqrt(this.N);\n\t\tthis.mat = tmp;\n\n\t\t//window.requestIdleCallback(() => this.map = this.solve(this.mat));\n\t\tfor(let i = 0; i<3; i++)\n\t\t\tthis.mat[Math.floor(Math.random()*9)][Math.floor(Math.random()*9)] = 1+Math.floor(Math.random()*9);\n\t\t\n\t\tthis.mat = this.solve(this.mat);\n\n\t\tthis.matIncomplete = clone(this.mat);\n\t\tthis.matIncomplete = this.unSolveK(this.matIncomplete, this.K);\n\t}\n \n\tshuffle = (array) => {\n\t\tvar currentIndex = array.length,  randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (currentIndex !== 0) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\n\t\t\t// And swap it with the current element.\n\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\tarray[randomIndex], array[currentIndex]];\n\t\t}\n\t  \n\t\treturn array;\n\t}\n\n\tnextEmptySpot = (mat) => {\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tif (mat[i][j] === 0) \n\t\t\t\t\treturn [i, j];\n\t\t\t}\n\t\t}\n\n\t\treturn [-1, -1];\n\t}\n\n    checkRow = (mat, row, value) => {\n\t\tfor(let i = 0; i < mat[row].length; i++) {\n\t\t\tif(mat[row][i] === value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t   \n\t\treturn true;\n\t}\n\n\tcheckColumn = (mat, column, value) => {\n\t\tfor(let i = 0; i < mat.length; i++) {\n\t\t\tif(mat[i][column] === value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\n\t\treturn true;\n\t}\n\n\tcheckSquare = (mat, row, column, value) => {\n\t\tlet boxRow = Math.floor(row / 3) * 3;\n\t\tlet boxCol = Math.floor(column / 3) * 3;\n\t\t\n\t\tfor (var r = 0; r < 3; r++){\n\t\t\tfor (var c = 0; c < 3; c++){\n\t\t\t\tif (mat[boxRow + r][boxCol + c] === value)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tcheckValue = (mat, row, column, value) => {\n\t\tif(this.checkRow(mat, row, value) &&\n\t\t\tthis.checkColumn(mat, column, value) &&\n\t\t\tthis.checkSquare(mat, row, column, value)) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false; \n\t}\n\n\trandNum = () => {\n\t\treturn Math.floor(Math.random()*this.N)+1;\n\t}\n\n\tsolve = (mat) => {\n\t\tlet emptySpot = this.nextEmptySpot(mat);\n\t\tlet row = emptySpot[0];\n\t\tlet col = emptySpot[1];\n\t\t\n\t\t// there is no more empty spots\n\t\tif (row === -1){\n\t\t\treturn mat;\n\t\t}\n\n\t\tlet nums = this.shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\t\tnums.forEach(num => {\n\t\t\tif(this.checkValue(mat, row, col, num)){\n\t\t\t\tmat[row][col] = num;\n\t\t\t\tthis.solve(mat);\n\t\t\t}\n\t\t});\n\n\t\tif (this.nextEmptySpot(mat)[0] !== -1)\n\t\t\tmat[row][col] = 0;\n\t\n\t\treturn mat;\n\t}\n\n\tunSolveK = (matrix, K) => {\n\t\tlet m = [...matrix];\n\t\tfor(let i = 0; i<K; i++){\n\t\t\tlet randX, randY;\n\n\t\t\tdo{\n\t\t\t\trandX = Math.floor(Math.random()*this.N);\n\t\t\t\trandY = Math.floor(Math.random()*this.N);\n\t\t\t}while(m[randX][randY] === -1);\n\n\t\t\tm[randX][randY] = -1;\n\t\t}\n\n\t\treturn m;\n\t}\n\n\ttoggleComplete = () => {\n\t\tthis.showComplete = !this.showComplete;\n\t}\n\n\tcheckInput = (i, j, e) => {\n\t\tlet val = Number(e.target.value);\n\t\tlet isCorrect = this.mat[i][j] === val;\n\t\t//let empty = \"\" === e.target.value;\n\n\t\treturn isCorrect;\n\t}\n\n\trender(){\n\t\tlet rows;\n\t\t\n\t\tif(this.state.showSolution){\n\t\t\trows = this.mat.map((item, i) => {\n\t\t\t\tlet entry = item.map((element, j) => {\n\t\t\t\t\treturn ( \n\t\t\t\t\t\t<td key={j}>{element}</td>\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={i}>{entry}</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t}else{\n\t\t\trows = this.matIncomplete.map((item, i) => {\n\t\t\t\tlet entry = item.map((element, j) => {\n\t\t\t\t\tif(element !== -1){\n\t\t\t\t\t\treturn ( \n\t\t\t\t\t\t\t<td key={j}>{element}</td>\n\t\t\t\t\t\t);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<td className={\"empty\" + (this.state.realTimeCorrection?\" realtime\":\"\")} key={j}>\n\t\t\t\t\t\t\t\t<NumberInput\n\t\t\t\t\t\t\t\t\trealtime={this.state.realTimeCorrection}\n\t\t\t\t\t\t\t\t\tcorrection={e => {return this.checkInput(i, j, e)}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={i}>{entry}</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tlet btnText = this.showComplete?\"Hide solution\":\"Show solution\";\n\n\t\treturn (\n\t\t\t<div className=\"sudoku-container\">\n\t\t\t\t<table className=\"sudoku\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{rows}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\n\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t<button onClick={()=>{\n\t\t\t\t\t\t\tthis.reload(); \n\t\t\t\t\t\t\tthis.forceUpdate(); \n\t\t\t\t\t\t\tconsole.log(\"reloading\");\n\t\t\t\t\t\t}}>Refresh</button>\n\n\t\t\t\t\t<div className=\"spacer\"></div>\n\n\t\t\t\t\t<button onClick={()=>{\n\t\t\t\t\t\t\tthis.toggleComplete(); \n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\tconsole.log(this.showComplete?\"Showing solution\":\"Hiding solution\");\n\t\t\t\t\t\t}}>{btnText}</button>\n\n\t\t\t\t\t<Toggle onToggle={(isActive) => {this.setState({realTimeCorrection: isActive})}}/>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst clone = (items) => items.map(item => Array.isArray(item) ? clone(item) : item);\n\nexport default Sudoku;","import Sudoku from './components/Sudoku';\n\nimport './styles/main.scss';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Sudoku/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}