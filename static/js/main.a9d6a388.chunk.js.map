{"version":3,"sources":["Sudoku.js","App.js","index.js"],"names":["Sudoku","props","mat","matIncomplete","N","K","SRN","showComplete","reload","tmp","Array","i","j","Math","sqrt","floor","random","solve","clone","unSolveK","shuffle","array","randomIndex","currentIndex","length","nextEmptySpot","checkRow","row","value","checkColumn","column","checkSquare","boxRow","boxCol","r","c","checkValue","randNum","emptySpot","col","forEach","num","matrix","m","randX","randY","toggleComplete","rows","this","map","item","entry","element","className","btnText","onClick","forceUpdate","console","log","Component","items","isArray","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9d6a388.chunk.js","sourcesContent":["import { Component } from 'react';\n\nimport './styles/sudoku.scss';\n\nclass Sudoku extends Component {\n\tmat = null;\n\tmatIncomplete = null;\n\tN = 9; // number of columns/rows.\n\tK = 60; // No. Of missing digits\n\tSRN = -1; // square root of N\n\tshowComplete = false;\n\n    // Constructor\n    constructor(props) {\n\t\tsuper(props);\n\n\t\tlet tmp = Array(this.N);\n\t\tfor(let i = 0; i<this.N; i++){\n\t\t\ttmp[i] = Array(this.N);\n\n\t\t\tfor(let j = 0; j<this.N; j++){\n\t\t\t\ttmp[i][j] = 0;\n\t\t\t}\n\t\t}\n\n        // Compute square root of N\n        this.SRN = Math.sqrt(this.N);\n\t\tthis.mat = tmp;\n\n\t\t//window.requestIdleCallback(() => this.map = this.solve(this.mat));\n\t\tfor(let i = 0; i<3; i++)\n\t\t\tthis.mat[Math.floor(Math.random()*9)][Math.floor(Math.random()*9)] = 1+Math.floor(Math.random()*9);\n\t\t\n\t\tthis.mat = this.solve(this.mat);\n\t\tthis.matIncomplete = clone(this.mat);\n\n\t\tthis.matIncomplete = this.unSolveK(this.matIncomplete, this.K);\n    }\n\n\treload = () => {\n\t\tlet tmp = Array(this.N);\n\t\tfor(let i = 0; i<this.N; i++){\n\t\t\ttmp[i] = Array(this.N);\n\n\t\t\tfor(let j = 0; j<this.N; j++){\n\t\t\t\ttmp[i][j] = 0;\n\t\t\t}\n\t\t}\n\n        // Compute square root of N\n        this.SRN = Math.sqrt(this.N);\n\t\tthis.mat = tmp;\n\n\t\t//window.requestIdleCallback(() => this.map = this.solve(this.mat));\n\t\tfor(let i = 0; i<3; i++)\n\t\t\tthis.mat[Math.floor(Math.random()*9)][Math.floor(Math.random()*9)] = 1+Math.floor(Math.random()*9);\n\t\t\n\t\tthis.mat = this.solve(this.mat);\n\n\t\tthis.matIncomplete = clone(this.mat);\n\t\tthis.matIncomplete = this.unSolveK(this.matIncomplete, this.K);\n\t}\n \n\tshuffle = (array) => {\n\t\tvar currentIndex = array.length,  randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (currentIndex !== 0) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\n\t\t\t// And swap it with the current element.\n\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\tarray[randomIndex], array[currentIndex]];\n\t\t}\n\t  \n\t\treturn array;\n\t}\n\n\tnextEmptySpot = (mat) => {\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tif (mat[i][j] === 0) \n\t\t\t\t\treturn [i, j];\n\t\t\t}\n\t\t}\n\n\t\treturn [-1, -1];\n\t}\n\n    checkRow = (mat, row, value) => {\n\t\tfor(let i = 0; i < mat[row].length; i++) {\n\t\t\tif(mat[row][i] === value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t   \n\t\treturn true;\n\t}\n\n\tcheckColumn = (mat, column, value) => {\n\t\tfor(let i = 0; i < mat.length; i++) {\n\t\t\tif(mat[i][column] === value) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\n\t\treturn true;\n\t}\n\n\tcheckSquare = (mat, row, column, value) => {\n\t\tlet boxRow = Math.floor(row / 3) * 3;\n\t\tlet boxCol = Math.floor(column / 3) * 3;\n\t\t\n\t\tfor (var r = 0; r < 3; r++){\n\t\t\tfor (var c = 0; c < 3; c++){\n\t\t\t\tif (mat[boxRow + r][boxCol + c] === value)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tcheckValue = (mat, row, column, value) => {\n\t\tif(this.checkRow(mat, row, value) &&\n\t\t\tthis.checkColumn(mat, column, value) &&\n\t\t\tthis.checkSquare(mat, row, column, value)) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false; \n\t}\n\n\trandNum = () => {\n\t\treturn Math.floor(Math.random()*this.N)+1;\n\t}\n\n\tsolve = (mat) => {\n\t\tlet emptySpot = this.nextEmptySpot(mat);\n\t\tlet row = emptySpot[0];\n\t\tlet col = emptySpot[1];\n\t\t\n\t\t// there is no more empty spots\n\t\tif (row === -1){\n\t\t\treturn mat;\n\t\t}\n\n\t\tlet nums = this.shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\t\tnums.forEach(num => {\n\t\t\tif(this.checkValue(mat, row, col, num)){\n\t\t\t\tmat[row][col] = num;\n\t\t\t\tthis.solve(mat);\n\t\t\t}\n\t\t});\n\n\t\tif (this.nextEmptySpot(mat)[0] !== -1)\n\t\t\tmat[row][col] = 0;\n\t\n\t\treturn mat;\n\t}\n\n\tunSolveK = (matrix, K) => {\n\t\tlet m = [...matrix];\n\t\tfor(let i = 0; i<K; i++){\n\t\t\tlet randX, randY;\n\n\t\t\tdo{\n\t\t\t\trandX = Math.floor(Math.random()*this.N);\n\t\t\t\trandY = Math.floor(Math.random()*this.N);\n\t\t\t}while(m[randX][randY] === -1);\n\n\t\t\tm[randX][randY] = -1;\n\t\t}\n\n\t\treturn m;\n\t}\n\n\ttoggleComplete = () => {\n\t\tthis.showComplete = !this.showComplete;\n\t}\n\n\trender(){\n\t\tlet rows;\n\t\t\n\t\tif(this.showComplete){\n\t\t\trows = this.mat.map((item, i) => {\n\t\t\t\tlet entry = item.map((element, j) => {\n\t\t\t\t\treturn ( \n\t\t\t\t\t\t<td key={j}>{element}</td>\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={i}>{entry}</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t}else{\n\t\t\trows = this.matIncomplete.map((item, i) => {\n\t\t\t\tlet entry = item.map((element, j) => {\n\t\t\t\t\tif(element !== -1){\n\t\t\t\t\t\treturn ( \n\t\t\t\t\t\t\t<td key={j}>{element}</td>\n\t\t\t\t\t\t);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<td className=\"empty\" key={j}><textarea></textarea></td>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={i}>{entry}</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tlet btnText = this.showComplete?\"Hide solution\":\"Show solution\";\n\n\t\treturn (\n\t\t\t<div className=\"sudoku-container\">\n\t\t\t\t<table className=\"sudoku\">\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{rows}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\n\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t<button onClick={()=>{\n\t\t\t\t\t\t\tthis.reload(); \n\t\t\t\t\t\t\tthis.forceUpdate(); \n\t\t\t\t\t\t\tconsole.log(\"reloading\");\n\t\t\t\t\t\t}}>Refresh</button>\n\n\t\t\t\t\t<button onClick={()=>{\n\t\t\t\t\t\t\tthis.toggleComplete(); \n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t\tconsole.log(this.showComplete?\"Showing solution\":\"Hiding solution\");\n\t\t\t\t\t\t}}>{btnText}</button>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst clone = (items) => items.map(item => Array.isArray(item) ? clone(item) : item);\n\nexport default Sudoku;","import Sudoku from './Sudoku';\n\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t\n\t\t\t\t<Sudoku/>\n\t\t\t\t\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}